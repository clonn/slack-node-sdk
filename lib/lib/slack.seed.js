// Generated by CoffeeScript 1.10.0
var DEFAULT_MAX_ATTEMPTS, DEFAULT_TIMEOUT, Slack, Webhook, request,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

request = require("requestretry");

Webhook = require("./Webhook");

DEFAULT_TIMEOUT = 10 * 1000;

DEFAULT_MAX_ATTEMPTS = 3;

Slack = (function() {
  Slack.Webhook = Webhook;

  Slack.prototype.detectEmoji = Webhook.detectEmoji;

  function Slack(token, domain) {
    this.token = token;
    this.domain = domain;
    this.api = bind(this.api, this);
    this.webhook = bind(this.webhook, this);
    this.setWebhook = bind(this.setWebhook, this);
    this.composeUrl = bind(this.composeUrl, this);
    this.apiMode = this.domain == null;
    this.url = this.composeUrl();
    this.timeout = DEFAULT_TIMEOUT;
    this.maxAttempts = DEFAULT_MAX_ATTEMPTS;
  }

  Slack.prototype.composeUrl = function() {
    return "https://slack.com/api/";
  };

  Slack.prototype.setWebhook = function(url) {
    this.webhookUrl = url;
    return this;
  };

  Slack.prototype.webhook = function(options, callback) {
    var webhook;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!options.url) {
      options.url = this.webhookUrl;
    }
    if (!options.timeout) {
      options.timeout = this.timeout;
    }
    if (!options.maxAttempts) {
      options.maxAttempts = this.maxAttempts;
    }
    webhook = new Webhook;
    return webhook.respond(options, function(err, response) {
      return callback(err, response);
    });
  };

  Slack.prototype.api = function(method, options, callback) {
    var request_arg, url;
    if (options == null) {
      options = {};
    }
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    options.token = this.token;
    url = this.url + method;
    request_arg = {
      url: this.url + method,
      timeout: this.timeout,
      maxAttempts: this.maxAttempts,
      retryDelay: 0
    };
    if (this._is_post_api(method)) {
      request_arg.method = "POST";
      request_arg.formData = options;
    } else {
      request_arg.method = "GET";
      request_arg.qs = options;
    }
    request(request_arg, function(err, body, response) {
      var error, parsedResponse;
      if (err) {
        return callback(err, {
          status: "fail",
          response: response
        });
      }
      try {
        parsedResponse = JSON.parse(response);
      } catch (error) {
        err = error;
        err = new Error("Couldn't parse Slack API response as JSON:\n" + response);
        return typeof callback === "function" ? callback(err) : void 0;
      }
      if (typeof callback === "function") {
        callback(err, parsedResponse);
      }
    });
    return this;
  };

  Slack.prototype._is_post_api = function(method) {
    return method === "files.upload";
  };

  return Slack;

})();

module.exports = Slack;
